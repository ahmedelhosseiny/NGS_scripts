# INTRODUCTION ------------------------------------------------------------
# ToDo: le text

# SET-UP ------------------------------------------------------------------
# rm(list = ls())

# We also want to have a certain directory structure to store output and saved
# data objects. For me this is 1. data - 1.1 output; 1.2 RDS Show warnings is 
# disabled so that we are not bothered if the directories already exist.
dir.create("data", showWarnings = FALSE)
dir.create("data/output", showWarnings = FALSE)
dir.create("data/RDS", showWarnings = FALSE)
dir.create("data/RAW", showWarnings = FALSE)

# Initialize variables for later use.
# This is a nice color palette.
cols <- cols <- pals::tableau20(20); scales::show_col(cols)
# Create a variable to our working directory for CARNIVAL - Cplex output
WORKDIR <- getwd()
# Prepare a list to collect our results.
myres_list <- list()

# We will need these libraries. Check out 'install.packages.R' if you want
# some help with the installation.
library(MSigDB)
library(GSVA)
library(tidyverse)
library(tibble)
library(tidyr)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(DESeq2)
library(limma)
library(fgsea)
library(dnet)
library(igraph)

# FUNCTIONS ---------------------------------------------------------------
# Helpful functions to make plots look nicer and facilitate neat code.

## 'quantile_breaks' optimizes color range for heatmap plotting.
# @param: xs, vector of values to adjust palette breaks to
# @param: n, number of steps in color palette
quantile_breaks <- function(xs, n = 10) {
  breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
  breaks[!duplicated(breaks)]
}

## 'networkCARNIVAL' constructs a network object out of CARNIVALs output
# @param: input.obj, unformatted CARNIVAL output
# @param: weightCut, threshold to dismiss edges with low weight
# @param: clusterSize, only allow clusters of given size in resulting graph
networkCARNIVAL <- function(input.obj, weightCut=0, clusterSize=0) {
  
  nodes <- input.obj$nodesAttributes %>% 
    as.data.frame() %>% 
    dplyr::mutate(act_sign = sign(as.numeric(AvgAct))) %>%
    dplyr::mutate(NodeType = ifelse(nchar(NodeType)==0, "N",NodeType)) %>%
    dplyr::mutate( node.color = ifelse(NodeType == "N", "#C7C7C7", ifelse(NodeType == "T", "#98DF8A", "#D18ADF"))) %>%
    dplyr::mutate( node.shape = ifelse(act_sign == -1, "square", ifelse(act_sign == "1", "circle", "sphere")))
  
  # this produces a network of all the nodes in the CARNIVAL output
  # so afterwards we will need to filter in some way
  C.net <- input.obj$weightedSIF %>%
    # transform to data.frame
    as.data.frame() %>%
    # make Node1 and Node2 the first columns of the data.frame
    dplyr::relocate(Node1) %>%
    dplyr::relocate(Node2, .after = Node1) %>%
    # transform Weight attribute to numeric and apply cutoff to remove unwanted edges
    dplyr::mutate( Weight = as.numeric(Weight) ) %>% 
    dplyr::filter( Weight >= weightCut ) %>%
    # edge colors - blue: activation & orange: inhibition
    dplyr::mutate( edge.color = ifelse(Sign == 1, "#1F77B4", "#D62728")) %>%
    dplyr::mutate( edge.type = ifelse(Sign == 1, "dashed", "dotted")) %>%
    dplyr::mutate( edge.width = ifelse(Weight <= 25, 0.25, ifelse(Weight <= 50, 0.5, ifelse(Weight <= 75, 0.75, 1)))) %>%
    # create an igraph object from this data.frame
    igraph::graph_from_data_frame(directed = TRUE, vertices = nodes)
  
  deg <- degree(C.net, mode="all")
  V(C.net)$size <- deg
  
  # get component statistics and create subgraph that only contains connected nodes
  tmp <- igraph::components(C.net)
  tmp_clusters <- which(tmp$csize >= clusterSize)
  C.net <- igraph::induced_subgraph(C.net, names(tmp$membership[which(tmp$membership %in% tmp_clusters)]))
  
  return(C.net)
}

## 'plotCnet' visualizes the given graph using 'visNet' 
# @param: carnival.graph, needs to be output of 'networkCARNIVAL' to ensure all parameters are set.
# @param: layoutType, I=[1,5]; Default value should be nice for most graphs.
# ToDo: This needs a legend that explains colors and node types!!!
plotCnet <- function(carnival.graph, layoutType=1) {
  # switch between different preset layouts
  l <- switch(layoutType,
              layout_with_fr(carnival.graph, niter = 2000),
              layout.fruchterman.reingold(carnival.graph),
              layout_in_circle(carnival.graph),
              layout_on_sphere(carnival.graph),
              layout_randomly(carnival.graph))
  
  dnet::visNet(carnival.graph, newpage=F,
               vertex.shape=get.vertex.attribute(carnival.graph, "node.shape", V(carnival.graph)), 
               vertex.label.cex=0.75,  vertex.size = log2(V(carnival.graph)$size+1),
               vertex.color = get.vertex.attribute(carnival.graph, "node.color", V(carnival.graph)),
               vertex.frame.color = "black",
               mark.shape=1, mark.expand=10, 
               edge.color=get.edge.attribute(carnival.graph)$edge.color,
               #edge.lty = E(carnival.graph)$edge.type,
               edge.arrow.size=.2,
               edge.curved=.2,
               edge.width=log10(get.edge.attribute(carnival.graph)$Weight), center=F,
               glayout = l)
  legend("bottomleft", 
         title = "Node types and status",
         legend=c("T","N","S","active","inactive"), 
         box.col="transparent", pch=c(16,16,16,16,15), 
         col = c("#98DF8A", "#C7C7C7", "#D18ADF","black","black"),
         #horiz=TRUE,
         xpd=TRUE, inset=c(0, -.15), cex=.8,
         ncol=2)
}

# Code for hypergeometric test
GSE_analysis <- function(geneList,Annotation_DB){
  
  geneList = geneList[geneList %in% unique(unlist(Annotation_DB))]
  
  ResultsDF = matrix(0,nrow = length(Annotation_DB),ncol = 5)
  rownames(ResultsDF) = names(Annotation_DB)
  colnames(ResultsDF) = c("GenesInPathway","GenesInList","GeneNames","p_value","corr_p_value")
  
  DB_genecontent = length(unique(unlist(Annotation_DB)))
  
  GenesDB = DB_genecontent 
  SelectedGenes = length(geneList)
  
  for(gset in rownames(ResultsDF)){
    GP = length(Annotation_DB[[gset]])
    GL = length(intersect(Annotation_DB[[gset]],geneList))
    
    ResultsDF[gset,"GenesInList"] = GL
    ResultsDF[gset,"GenesInPathway"] = GP
    ResultsDF[gset,"GeneNames"] = paste(intersect(Annotation_DB[[gset]],geneList),collapse = ",")
    #ResultsDF[gset,"p_value"] = HypergeometricTest(overRepres = TRUE,N = N,K = K,n = n,k = k)
    ResultsDF[gset,"p_value"] = phyper(q=GL - 1, m=GP, n=GenesDB-GP, 
                                       k=SelectedGenes, lower.tail = FALSE, log.p = FALSE)
  }
  
  ResultsDF[,"corr_p_value"] = p.adjust(ResultsDF[,"p_value"],method = "BH")
  ResultsDF = data.frame(ResultsDF,stringsAsFactors = F)
  ResultsDF = ResultsDF[order(ResultsDF[,"p_value"]),]
  
  return(ResultsDF)
  
}

## 'plotGSE' plot significantly enriched pathways
# @param: input.obj, unformatted CARNIVAL output
# @param: p.select, either "p_value" or "corr_p_value"
# @param: p.threshold, determines which pathways to include
plotGSE <- function(input.obj, p.title = "", p.select = "corr_p_value", p.threshold = 0.05) {
  
  res.plot <- input.obj %>% 
    tibble::rownames_to_column(var = "set") %>% 
    tibble %>% 
    dplyr::mutate( corr_p_value = as.numeric(corr_p_value) ) %>% 
    plyr::mutate( p_value = as.numeric(p_value) ) %>% 
    #dplyr::arrange( dplyr::desc(abs(corr_p_value)) ) %>% 
    dplyr::mutate( set = gsub(pattern = "REACTOME_", "", set)) %>% 
    dplyr::mutate( set = gsub(pattern = "_", " ", set)) %>% 
    dplyr::mutate( set = stringr::str_trunc( set, 40 ) ) %>% 
    dplyr::filter( get(p.select) < p.threshold ) %>% 
    dplyr::mutate( y.value = -log10(get(p.select)) ) %>% 
    #head(25) %>% 
    #dplyr::mutate( set = substr(set, 1, 40)) %>% 
    ggpubr::ggdotchart(., x = "set", y = "y.value", xlab = "", ylab = paste("-log10(",p.select,")", sep=""),
                       dot.size = 4, title = eval(p.title),
                       add.params = list(color = "lightgray", size = 2),
                       add = "segments",
                       rotate = TRUE
    ) + theme(axis.text=element_text(size=8), 
              legend.position = "none",
              axis.text.x = element_text(size = 12),
              axis.title=element_text(size=14,face="bold")) 
  
  return(res.plot)
}

# PREPARATION -------------------------------------------------------------
## Only execute if not done already in the PDC_pipeline script.
# First we will prepare our variables so that we can progress in the investigation.
dds <- readRDS(file="data/RDS/Thyroid_dds.rds", refhook = NULL)

# For downstream analysis we normalize our count matrix.
vsd <- DESeq2::vst(dds, blind=FALSE,fitType='local')   # normalization
Normalised_counts_matrix <- SummarizedExperiment::assay(vsd)   # get counts

## We also extract our covariate information from the desseq object and store them separately for later use.
cova <- SummarizedExperiment::colData(dds)

# Sanity check - we just test if sample IDs match in both datasets
nrow(cova); ncol(Normalised_counts_matrix)
Normalised_counts_matrix <- Normalised_counts_matrix[ , colnames(Normalised_counts_matrix) %in% cova$sID ]
cova            <- cova[ cova$sID %in% colnames(Normalised_counts_matrix),  ]
nrow(cova) == ncol(Normalised_counts_matrix)
rownames( cova ) == colnames( Normalised_counts_matrix )

# And if everything is ok we can save out files
saveRDS(Normalised_counts_matrix, file="data/RDS/Thyroid_normalized_counts.rds", compress = TRUE)
saveRDS(cova, file="data/RDS/Thyroid_covariates.rds", compress = TRUE)


# SINGLE SAMPLE GENE SET ENRICHMENT ANALYSIS ------------------------------
# Set-up databases for pathway mapping
Hs.hm <- MSigDB[["HALLMARK"]]
## we just keep this here for later use
# Hs.c2 <- MSigDB[["C2_CURATED"]]
# KEGG.DB <- Hs.c2[grep("KEGG_", names(Hs.c2))]
# REACTOME.DB <- Hs.c2[grep("REACTOME_", names(Hs.c2))]
# Hs.c3 <- MSigDB[["C3_MOTIF"]]
# Hs.c5 <- MSigDB[["C5_GENE_ONTOLOGY"]]

# load the results of the expression analysis
Normalised_counts_matrix <- readRDS(file="data/RDS/Thyroid_normalized_counts.rds", refhook = NULL)
cova <- readRDS(file="data/RDS/Thyroid_covariates.rds", refhook = NULL)
result <- readRDS(file="data/RDS/Thyroid_result.rds", refhook = NULL)


## IQR based filtering - distribution in this data does not warrant filtering.
# iqr <- apply(Normalised_counts_matrix,1,IQR)
# plot(ecdf(iqr))
# keep <- iqr >= quantile(iqr, 0.25)
# Normalised_counts_matrix <- Normalised_counts_matrix[keep,]

# perform actual enrichment
ssgsea.Thyroid <- gsva(
  as.matrix(Normalised_counts_matrix), Hs.hm, min.sz=10, max.sz=500,
  method="ssgsea", ssgsea.norm=TRUE,
  verbose=TRUE)

# have a look at the output
head( ssgsea.Thyroid[order(ssgsea.Thyroid[,1], decreasing=T),], 10 )

# We test whether there is a difference between the GSVA enrichment scores from each 
# pair of phenotypesusing a simple linear model and moderated t-statistics computed 
# by thelimmapackage using an empiricalBayes shrinkage method (see Smyth, 2004).  
# We are going to examine both, changes at gene level andchanges  at  pathway  level 
# and  since,  as  we  shall  see  below,  there  are  plenty  of  them,  we  are  
# going  toemploy the following stringent cut-offs to attain a high level of statistical 
# and biological significance:
adjPvalueCutoff <- 0.1
logFCcutoff <- log2(2)
design <- model.matrix(~ factor(colData(dds)$condition))

colnames(design) <- c("ALL", "EARLYvsLATE")
fit <- lmFit(ssgsea.Thyroid, design)
fit <- eBayes(fit)
allGeneSets <- topTable(fit, coef="EARLYvsLATE", number=Inf)
DEgeneSets <- topTable(fit, coef="EARLYvsLATE", number=Inf,p.value=adjPvalueCutoff, adjust="BH")
res <- decideTests(fit, p.value=adjPvalueCutoff)

summary(res)

# We rename our samples - if we want to.
colnames(ssgsea.Thyroid) <- c("early_1","early_2","early_3","late_1","late_2","late_3")
# construct our design to facilitate comparisons
design <- model.matrix(~ 0+factor(c(rep(1,3),rep(2,3))))
colnames(design) <- c("early","late")             
# here we specify which comparison we want to make
# In this case we take 'early' as reference level, because that's the direction in which
# we calculated the differential expression. To that end we use the column names of out design
# and say that it is 'late-stage' minus 'early-stage'
contrast.matrix <- makeContrasts(late-early, levels=design)
# fit the linear model 
fit  <- lmFit(as.matrix(ssgsea.Thyroid), design)
# and get results for our chosen contrast
fit2 <- contrasts.fit(fit, contrast.matrix)
# calculate Empirical Bayes Statistics for Differential Expression
fit2 <- eBayes(fit2)
# extract the top ranked pathways and perform multiple testing correction
resf <- topTableF(fit2, adjust="BH",number=Inf,sort.by="F",p.value=adjPvalueCutoff)

pheatmap::pheatmap(ssgsea.Thyroid[rownames(resf),],fontsize=8,cellwidth=10,cellheight=10)

res_HB <- decideTests(fit2, p.value=adjPvalueCutoff)
summary(res_HB)

# ***********
library(GSVAdata)
data(leukemia)
summary(leukemia_eset)
leukemia_eset


test <- assayData(leukemia_eset)
test <- test$exprs

plot(ecdf(iqr))



iqr <- apply(test,1,IQR)

plot(density(iqr))

hall_sym <- lapply(hall,function(x){unlist(mget(x,org.Mm.egSYMBOL,ifnotfound=NA))})

res_gsva <- gsva(as.matrix(log2(mymat[,])),hall_sym,rnaseq=F,no.bootstraps=1)
colnames(res_gsva) <- c("WT_1","WT_2","WT_3","WT_4","KO_Healthy_1","KO_Healthy_2","KO_Healthy_3","KO_Healthy_4",
                        "KO_Scratch_1","KO_Scratch_2","KO_Scratch_3","KO_Scratch_4")

# Limma
library(limma)
design <- model.matrix(~ 0+factor(c(rep(1,4),rep(2,4),rep(3,3))))
colnames(design) <- c("WT","Healthy","Scratch")
contrast.matrix <- makeContrasts(Healthy-WT, Scratch-WT,Scratch-Healthy, levels=design)
fit  <- lmFit(as.matrix(res_gsva[,1:11]), design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
resf <- topTableF(fit2, adjust="BH",number=nrow(res_gsva),sort.by="F")
pheatmap(res_gsva[rownames(resf)[1:15],1:11],fontsize=8,cellwidth=10,cellheight=10)

# tutorial 
library(GSVAdata)
data(c2BroadSets)

res_gsva <- gsva(
  as.matrix(mygeneexpression), Hs.hm, min.sz=10, max.sz=500,
  method="ssgsea", ssgsea.norm=TRUE,
  verbose=TRUE)

colnames(res_gsva) <- c("early_1","early_2","early_3","late_1","late_2","late_3")
design <- model.matrix(~ 0+factor(c(rep(1,3),rep(2,3))))
colnames(design) <- c("early","late")

contrast.matrix <- makeContrasts(early-late, levels=design)
fit  <- lmFit(as.matrix(res_gsva), design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
resf <- topTableF(fit2, adjust="BH",number=nrow(res_gsva),sort.by="F")
pheatmap::pheatmap(res_gsva[rownames(resf),],fontsize=8,cellwidth=10,cellheight=10)





## depict gene sets as networks
plot_igraph <- function(dat, source, overlap, cutString, comp ) {
  mygroups <- source[rownames(dat)]
  mat <- sapply(mygroups,
                function(y)
                  sapply(mygroups,
                         function(x) length(as.vector(
                           intersect(as.vector(unlist(y)),
                                     as.vector(unlist(x)))))/min(length(as.vector(unlist(y))),
                                                                 length(as.vector(unlist(x))))))
  
  # Draw an edge, if they have 20% overlap
  b.mat <- mat > overlap
  # Set the diagonal to zero
  diag(b.mat) <- FALSE
  # Create a graph
  groups.net <- graph.adjacency(b.mat,mode="undirected",diag=F)
  # Add Attributes to the nodes
  # Encode Node size from the size of the gene set
  w <- sapply( mygroups[V(groups.net)$name], length)
  dat$weight <- w[rownames(dat)]
  
  # Add the log 10 p-value
  dat$plog <- -log10(dat$p.val)
  # Set the fontsize
  dat$fontsize <- 8
  
  dat <- cbind(Term=rownames(dat), dat)
  
  # data(hs.inter)
  # data(ER.deg)
  # #subnet <- subg(g=hs.inter, dat=ER.deg$dat, refcol=1)
  # 
  # 
  # Prepare the graph
  gt3 <- subg(g=groups.net, dat=dat, refcol=1)
  
  gt3 <- att.setv(g=gt3,
                  from="plog", to="nodeColor",
                  breaks=seq(min(dat$plog),max(dat$plog),((max(dat$plog) - min(dat$plog)) / 10)),
                  cols=c("Green","Red"),pal=2)
  
  gt3 <- att.setv(g=gt3, from="weight", to="nodeSize", pal=2)
  gt3 <- att.setv(g=gt3, from="fontsize", to="nodeFontSize", pal=2)
  gt3 <- att.setv(g=gt3, from="fontsize", to="nodeFontSize", pal=2)
  
  #gt3
  
  # rename node names
  V(gt3)$name <- gsub(cutString, "", V(gt3)$name)
  
  gr <- cluster_edge_betweenness(gt3)
  #plot(gr, gt3, col=gt3$legNodeColor$scale, layout=layout.circle)
  
  pdf(file= paste( "gage_", cutString, comp, ".pdf", sep=""), width=18, height=18)
  plot(
    gr, gt3,
    #col=gt3$legNodeColor$scale,
    main=paste( cutString, comp),
    vertex.size=4 )
  dev.off()
}

# GSVA als Network 




# 
# - PCA
# - GSVA
# - Dorothea  => Upstream TFs
# - Carnival  => Upstream Pathways
# - Waiting for Raw Data as BAM files and do variant calling
# - Compare mutations with Cozmic Database
# - Use TCGA data and compare expression of Thyroid Cancer samples
