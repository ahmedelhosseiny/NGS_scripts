# SET-UP ------------------------------------------------------------------
# rm(list = ls())

# We also want to have a certain directory structure to store output and saved
# data objects. For me this is 1. data - 1.1 output; 1.2 RDS Show warnings is 
# disabled so that we are not bothered if the directories already exist.
dir.create("data", showWarnings = FALSE)
dir.create("data/output", showWarnings = FALSE)
dir.create("data/RDS", showWarnings = FALSE)
dir.create("data/RAW", showWarnings = FALSE)

# Initialize variables for later use.
# This is a nice color palette.
cols <- cols <- pals::tableau20(20); scales::show_col(cols)
# Create a variable to our working directory for CARNIVAL - Cplex output
WORKDIR <- getwd()
# Prepare a list to collect our results.
myres_list <- list()
# We also prepare the graphical parameters for plotting
dot.theme <- theme(axis.text=element_text(size=8), 
                   legend.position = "none",
                   axis.text.x = element_text(size = 12),
                   axis.title=element_text(size=14,face="bold")) 


# We will need these libraries. Check out 'install.packages.R' if you want
# some help with the installation.
library(tidyverse)
library(ggplot2)
library(fgsea)
library(dnet)
library(igraph)
library(limma)
library(patchwork)
library(ComplexHeatmap)

# FUNCTIONS ---------------------------------------------------------------
# Helpful functions to make plots look nicer and facilitate neat code.

## 'quantile_breaks' optimizes color range for heatmap plotting.
# @param: xs, vector of values to adjust palette breaks to
# @param: n, number of steps in color palette
quantile_breaks <- function(xs, n = 10) {
  breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
  breaks[!duplicated(breaks)]
}

## 'networkCARNIVAL' constructs a network object out of CARNIVALs output
# @param: input.obj, unformatted CARNIVAL output
# @param: weightCut, threshold to dismiss edges with low weight
# @param: clusterSize, only allow clusters of given size in resulting graph
networkCARNIVAL <- function(input.obj, weightCut=0, clusterSize=0) {
  
  nodes <- input.obj$nodesAttributes %>% 
    as.data.frame() %>% 
    dplyr::mutate(act_sign = sign(as.numeric(AvgAct))) %>%
    dplyr::mutate( node.color = ifelse(NodeType == "", "#7F7F7F", ifelse(NodeType == "T", "#D62728", "#98DF8A")))
  
  # this produces a network of all the nodes in the CARNIVAL output
  # so afterwards we will need to filter in some way
  C.net <- input.obj$weightedSIF %>%
    # transform to data.frame
    as.data.frame() %>%
    # make Node1 and Node2 the first columns of the data.frame
    dplyr::relocate(Node1) %>%
    dplyr::relocate(Node2, .after = Node1) %>%
    # transform Weight attribute to numeric and apply cutoff to remove unwanted edges
    dplyr::mutate( Weight = as.numeric(Weight) ) %>% 
    dplyr::filter( Weight >= weightCut ) %>%
    # edge colors - blue: activation & orange: inhibition
    dplyr::mutate( edge.color = ifelse(Sign == 1, "#1F77B4", "#FF7F0E")) %>%
    dplyr::mutate( edge.type = ifelse(Sign == 1, "dashed", "dotted")) %>%
    dplyr::mutate( edge.width = ifelse(Weight <= 25, 0.25, ifelse(Weight <= 50, 0.5, ifelse(Weight <= 75, 0.75, 1)))) %>%
    # create an igraph object from this data.frame
    igraph::graph_from_data_frame(directed = TRUE, vertices = nodes)
  
  deg <- degree(C.net, mode="all")
  V(C.net)$size <- deg
  
  # get component statistics and create subgraph that only contains connected nodes
  tmp <- igraph::components(C.net)
  tmp_clusters <- which(tmp$csize >= clusterSize)
  C.net <- igraph::induced_subgraph(C.net, names(tmp$membership[which(tmp$membership %in% tmp_clusters)]))
  
  return(C.net)
}

## 'plotCnet' visualizes the given graph using 'visNet' 
# @param: carnival.graph, needs to be output of 'networkCARNIVAL' to ensure all parameters are set.
# @param: layoutType, I=[1,5]; Default value should be nice for most graphs.
# ToDo: This needs a legend that explains colors and node types!!!
plotCnet <- function(carnival.graph, layoutType=1) {
  # switch between different preset layouts
  l <- switch(layoutType,
              layout_with_fr(carnival.graph, niter = 2000),
              layout.fruchterman.reingold(carnival.graph),
              layout_in_circle(carnival.graph),
              layout_on_sphere(carnival.graph),
              layout_randomly(carnival.graph))
  
  dnet::visNet(carnival.graph, newpage=F,
               vertex.shape="circle", 
               vertex.label.cex=0.75,  vertex.size = log2(V(carnival.graph)$size+1),
               vertex.color = get.vertex.attribute(carnival.graph, "node.color", V(carnival.graph)),
               vertex.frame.color = "black",
               mark.shape=1, mark.expand=10, 
               edge.color=get.edge.attribute(carnival.graph)$edge.color,
               edge.lty = E(carnival.graph)$edge.type,
               edge.arrow.size=.1,
               edge.curved=.1,
               edge.width=log10(get.edge.attribute(carnival.graph)$Weight), center=F,
               glayout = l)
}

# Code for hypergeometric test
GSE_analysis <- function(geneList,Annotation_DB){
  
  geneList = geneList[geneList %in% unique(unlist(Annotation_DB))]
  
  ResultsDF = matrix(0,nrow = length(Annotation_DB),ncol = 5)
  rownames(ResultsDF) = names(Annotation_DB)
  colnames(ResultsDF) = c("GenesInPathway","GenesInList","GeneNames","p_value","corr_p_value")
  
  DB_genecontent = length(unique(unlist(Annotation_DB)))
  
  GenesDB = DB_genecontent 
  SelectedGenes = length(geneList)
  
  for(gset in rownames(ResultsDF)){
    GP = length(Annotation_DB[[gset]])
    GL = length(intersect(Annotation_DB[[gset]],geneList))
    
    ResultsDF[gset,"GenesInList"] = GL
    ResultsDF[gset,"GenesInPathway"] = GP
    ResultsDF[gset,"GeneNames"] = paste(intersect(Annotation_DB[[gset]],geneList),collapse = ",")
    #ResultsDF[gset,"p_value"] = HypergeometricTest(overRepres = TRUE,N = N,K = K,n = n,k = k)
    ResultsDF[gset,"p_value"] = phyper(q=GL - 1, m=GP, n=GenesDB-GP, 
                                       k=SelectedGenes, lower.tail = FALSE, log.p = FALSE)
  }
  
  ResultsDF[,"corr_p_value"] = p.adjust(ResultsDF[,"p_value"],method = "BH")
  ResultsDF = data.frame(ResultsDF,stringsAsFactors = F)
  ResultsDF = ResultsDF[order(ResultsDF[,"p_value"]),]
  
  return(ResultsDF)
  
}

# PREPARE gene sets (here: REACTOME and TFT) ------------------------------

# C6: ONCOGENIC -> 189 gene sets
onco_gsets <- msigdf::msigdf.human %>% 
  dplyr::filter(category_code == "c6"  ) %>% #& grepl("^REACTOME_", geneset) ) %>% 
  dplyr::select(geneset, symbol) %>% 
  dplyr::group_by(geneset) %>% 
  dplyr::summarize(symbol=list(symbol)) %>% 
  deframe() 

# C3: regulatory target gene sets gene sets -> 1,137 gene sets
tft_gsets <- msigdf::msigdf.human %>% 
  dplyr::filter(category_code == "c3"  ) %>% 
  dplyr::filter(category_subcode == "tft"  ) %>% 
  dplyr::filter( !grepl(pattern = "_UNKNOWN$", x = geneset)  ) %>% # remove UNKNOWNs
  dplyr::select(geneset, symbol) %>% 
  dplyr::group_by(geneset) %>% 
  dplyr::summarize(symbol=list(symbol)) %>% 
  deframe() 



Normalised_counts_matrix <- readRDS(file="data/RDS/Thyroid_normalized_counts.rds", refhook = NULL)
cova <- readRDS(file="data/RDS/Thyroid_covariates.rds", refhook = NULL)
DEA_result <- readRDS(file="data/RDS/Thyroid_result.rds", refhook = NULL)

TFActivity_results <- readRDS(file="data/RDS/TFActivity_CARNIVAL_results.rds", refhook = NULL)

carnival_result <- readRDS(file="data/RDS/CARNIVAL_results_late_vs_early.rds", refhook = NULL)

## Here we extract the network topology from CARNIVAL's output, i.e., this is a list of 
# node pairs (Node1, Node2) connected by directed edges that have a weight attribute (Weight) as
# well as an indication for the type of relationship (Sign), i.e., activation (1) or inhibition (-1).
net   <- data.frame(carnival_result$weightedSI,
                    stringsAsFactors = F)
## Now we retrieve the attributes of all nodes in the network, i.e., node type, activation status.
nodes <- data.frame(carnival_result$nodesAttributes,
                    stringsAsFactors = F) %>% 
  mutate(act_sign = sign(as.numeric(AvgAct)))

### Display the inferred transcription factor activity in a network


## and make some plots here
test.net <- networkCARNIVAL(carnival_result, weightCut = 50, clusterSize = 15)

pdf(file = "data/output/CARNIVAL_network_late_vs_early.pdf", height = 18, width = 18, useDingbats = F, onefile=TRUE)
plotCnet(test.net, 1)
dev.off()


# Are active nodes enriched for a function?
active_nodes = nodes %>% filter(act_sign == 1)
#Hypergeometric test
gse_active <- GSE_analysis(geneList = active_nodes[[1]],
                           Annotation_DB = onco_gsets)

# Are inactive nodes enriched for a function?
inactive_nodes = nodes %>% filter(act_sign == -1)
#Hypergeometric test
gse_inactive <- GSE_analysis(geneList = inactive_nodes[[1]],
                             Annotation_DB = onco_gsets)

## Select type of p-value and threshold for significance
p.select <- "p_value"
p.threshold <- 0.05


gse_active %>% dplyr::filter( get(p.select) < p.threshold ) %>% nrow
gse_inactive %>% dplyr::filter( get(p.select) < p.threshold ) %>% nrow

p.ac <- gse_active %>% 
  tibble::rownames_to_column(var = "set") %>% 
  tibble %>% 
  dplyr::mutate( corr_p_value = as.numeric(corr_p_value) ) %>% 
  plyr::mutate( p_value = as.numeric(p_value) ) %>% 
  #dplyr::arrange( dplyr::desc(abs(corr_p_value)) ) %>% 
  dplyr::mutate( set = gsub(pattern = "REACTOME_", "", set)) %>% 
  dplyr::mutate( set = gsub(pattern = "_", " ", set)) %>% 
  dplyr::mutate( set = stringr::str_trunc( set, 40 ) ) %>% 
  dplyr::filter( get(p.select) < p.threshold ) %>% 
  dplyr::mutate( y.value = -log10(get(p.select)) ) %>% 
  #head(25) %>% 
  #dplyr::mutate( set = substr(set, 1, 40)) %>% 
  ggpubr::ggdotchart(., x = "set", y = "y.value", xlab = "", ylab = "-log10(adj p)",
                     dot.size = 4, title = "Active nodes",
                     add.params = list(color = "lightgray", size = 2),
                     add = "segments",
                     legend.title = "-log10(adj p)",
                     rotate = TRUE
  ) + dot.theme

p.in <- gse_inactive %>% 
  tibble::rownames_to_column(var = "set") %>% 
  tibble %>% 
  dplyr::mutate( corr_p_value = as.numeric(corr_p_value) ) %>% 
  plyr::mutate( p_value = as.numeric(p_value) ) %>% 
  #dplyr::arrange( dplyr::desc(abs(corr_p_value)) ) %>% 
  dplyr::mutate( set = gsub(pattern = "REACTOME_", "", set)) %>% 
  dplyr::mutate( set = gsub(pattern = "_", " ", set)) %>% 
  dplyr::mutate( set = stringr::str_trunc( set, 40 ) ) %>% 
  dplyr::filter( get(p.select) < p.threshold ) %>% 
  dplyr::mutate( y.value = -log10(get(p.select)) ) %>% 
  #head(25) %>% 
  #dplyr::mutate( set = substr(set, 1, 40)) %>% 
  ggpubr::ggdotchart(., x = "set", y = "y.value", xlab = "", ylab = "-log10(adj p)",
                     dot.size = 4, title = "Inactive nodes",
                     add.params = list(color = "lightgray", size = 2),
                     add = "segments",
                     legend.title = "-log10(adj p)",
                     rotate = TRUE
  ) + dot.theme

pdf(file = "CARNIVAL_Results_minsize_15/Nodes_REACTOME_pt1_vs_pt0.pdf", height = 18, width = 18, useDingbats = F, onefile=TRUE)
p.ac | p.in
dev.off()

# Are active nodes upregulated?
useful_nodes <- nodes %>% filter(act_sign != 0) %>%
  left_join(doro, by = c("Node"="Gene"))
p.nodes <- useful_nodes %>% ggpubr::ggviolin( x="act_sign", y = "t", trim = T, add = c("jitter", "boxplot") ) +
  ggpubr::stat_compare_means() +
  theme_bw()
pdf(file = "CARNIVAL_Results_minsize_15/Nodes_change_pt1_vs_pt0.pdf", height = 6, width = 6, useDingbats = F, onefile=TRUE)
p.nodes
dev.off()
summary( lm(t ~ factor(act_sign), data = useful_nodes) )

myres_list[["REACT activated pt1 vs pt0"]] <- gse_active
myres_list[["REACT in-activated pt1 vs pt0"]] <- gse_inactive









